Strobe Templates is a part of a larger Node.js framework I'm working on.
The template syntax is the same as in Django templates.

For now, Strobe Templates have the following template tags:

<code>{% for x in y %}{% endfor %}
{% if x %}{% else if y %}{% else %}{% endif %}
{% extends template_name %}
{% include template_name %}
{% block block_name %}</code>

You can define your own template tags in the "tags.js" module. Template inheritance is done in the same way as Django, only in an asynchronous way. Strobe templates support caching of parsed templates. 
One important difference from Django templates is that the render() method returns an array of strings. It's your job to call .join("") on the rendered output.

Simple usage example: 

<code>var sys = require('sys')
  , templates = require('template');

templates.setTemplatesDir('/path/to/templates/dir');
templates.setDebug(false);

var context = { foo: 1, bar: 2 };
var template = new templates.Template('path/to/template.html');
template.load( function( err, template ) {
  if( err ) // load/parse errors (invalid filename, bad template syntax)
    sys.puts( err );
  else
    template.render( context, function( err, output ) {
      if( err ) // render errors (invalid filename in context variables, bad context variables)
        sys.puts( err );
      else 
        sys.puts( output.join("") );
    });
});</code>

Run a benchmark and a test output:

<code>$ node tests/run.js</code>
